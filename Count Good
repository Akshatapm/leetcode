import java.util.*;

public class Solution {
    
    public long countGood(int[] nums, int k) {
        Map<Integer, Integer> freq = new HashMap<>();
        long res = 0, pairs = 0;
        int left = 0;
        
        for (int right = 0; right < nums.length; right++) {
            int val = nums[right];
            int count = freq.getOrDefault(val, 0);
            pairs += count; // add number of new pairs formed with nums[right]
            freq.put(val, count + 1);
            
            // shrink the window from the left until pairs < k
            while (pairs >= k) {
                res += nums.length - right; // all subarrays from left to end are valid
                int leftVal = nums[left];
                int leftCount = freq.get(leftVal);
                pairs -= leftCount - 1; // remove contribution from nums[left]
                freq.put(leftVal, leftCount - 1);
                left++;
            }
        }
        return res;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        // Sample input
        int[] nums = {1, 1, 2, 1, 2};
        int k = 2;

        long result = sol.countGood(nums, k);
        System.out.println("Number of good subarrays: " + result);
    }

}
