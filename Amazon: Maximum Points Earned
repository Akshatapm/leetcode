Amazon Shopping periodically has offers to attract more customers.

It recently launched an offer for n items in its inventory, where the ith item offered pointValues[i] reward points to the customer purchasing the item. Every time an offer-bearing item is purchased, the customer gains the point values associated with that item. Then the reward points of the remaining items are reduced by 1 unless it will reduce the points below 0.

Find the maximum possible reward points that can be gathered by purchasing the items optimally.

Note: Each item can be purchased at most once, in other words, pointValues[i] becomes 0 after the item is purchased.

Example

Consider the number of items to be n = 5, and their reward points to be pointValues = [5, 2, 2, 3, 11. The items can be purchased as follows:
Considering 0-based indexing, the items can be purchased in the following order.

First, purchase item 2, points earned poiritValues[2]-2. Points of remaining items after this purchase pointValues=[4, 1,0.29.

Next, purchase item 3, points earned - pointValues[3] = 2. Points of remaining items after this purchase pointValues=[3, 0, 0, 0, 0.

Finally, purchase item 0, points earned - pointValues[0]-3. Points of remaining items after this purchase pointValues=[0, 0, 0, 0, 0].

At this point, no items have reward points left. The maximum reward points is 2+2+ 3-7.

Function Description

Complete the function calculateMaximum Points Earned in the editor below.

calculate Maximum PointsEarned has the following parameter(s): int pointValues[n]: the reward points of each item

Returns

long int: the maximum reward points which can be collected

Constraints

1 sns105

D≤ pointValues[i] ≤ 106

import java.util.*;

public class AmazonRewards {

    public static long calculateMaximum(List<Integer> points) {
        // Sort the list in descending order
        Collections.sort(points, Collections.reverseOrder());

        long maxSum = 0L;
        int diff = 0;

        for (int val : points) {
            int curr = val - diff;
            if (curr <= 0) break;
            maxSum += curr;
            diff++;
        }

        return maxSum;
    }

    public static void main(String[] args) {
        List<Integer> pointValues = Arrays.asList(5, 2, 2, 3, 11);

        long result = calculateMaximum(pointValues);
        System.out.println("Maximum Reward Points: " + result);  // Expected Output: 16
    }
}
