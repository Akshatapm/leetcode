class Solution {
    public int maxFreqSum(String s) {
        if(s.length()==0)return 0;
        int maxvowel=0,maxconsonant=0;
        HashMap<Character,Integer> vowel=new HashMap<>();
         HashMap<Character,Integer> consonant=new HashMap<>();
         for(char c:s.toCharArray()){
            if(isvowel(c)){
                vowel.put(c,vowel.getOrDefault(c,0)+1);
            }else{
                consonant.put(c,consonant.getOrDefault(c,0)+1);
            }
         }
        for(Map.Entry<Character,Integer> entry:vowel.entrySet()){
             if(entry.getValue()>maxvowel){
                maxvowel=entry.getValue();
             }
        }
         for(Map.Entry<Character,Integer> entry:consonant.entrySet()){
             if(entry.getValue()>maxconsonant){
                maxconsonant=entry.getValue();
             }
        }
        return maxconsonant+maxvowel;
    }
    public static boolean isvowel(char c){
        return "aeiouAEIOU".indexOf(c) != -1;
    }
}


// we can remove the two extra loops by keeping track of maxvowel and maxconsonant 
while building the maps. That way you update the maximum frequency as you go, avoiding the final scans.


class Solution {
    public int maxFreqSum(String s) {
        if (s.length() == 0) return 0;

        int maxvowel = 0, maxconsonant = 0;
        HashMap<Character, Integer> vowel = new HashMap<>();
        HashMap<Character, Integer> consonant = new HashMap<>();

        for (char c : s.toCharArray()) {
            if (isvowel(c)) {
                int count = vowel.getOrDefault(c, 0) + 1;
                vowel.put(c, count);
                maxvowel = Math.max(maxvowel, count);  // update on the fly
            } else {
                int count = consonant.getOrDefault(c, 0) + 1;
                consonant.put(c, count);
                maxconsonant = Math.max(maxconsonant, count);  // update on the fly
            }
        }

        return maxconsonant + maxvowel;
    }

    public static boolean isvowel(char c) {
        return "aeiouAEIOU".indexOf(c) != -1;
    }
}
// we can use one more method like array of char which consisting fo ascii characters of 256 letters 

class Solution {
    public int maxFreqSum(String s) {
        if (s.length() == 0) return 0;

        int maxVowel = 0, maxConsonant = 0;
        int[] freq = new int[256]; // ASCII size (works for English letters)

        for (char c : s.toCharArray()) {
            freq[c]++;

            if (isVowel(c)) {
                maxVowel = Math.max(maxVowel, freq[c]);
            } else {
                maxConsonant = Math.max(maxConsonant, freq[c]);
            }
        }

        return maxVowel + maxConsonant;
    }

    private boolean isVowel(char c) {
        return "aeiouAEIOU".indexOf(c) != -1;
    }
}
